[
{
	"uri": "https://thuananwork.github.io/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu hệ thống Workshop này sẽ hướng dẫn bạn xây dựng và triển khai một website thương mại điện tử động trên nền tảng serverless hiện đại của AWS.\nBạn sẽ sử dụng các thành phần chủ chốt như API Gateway, AWS Certificate Manager, IAM, S3, Lambda, CloudFormation, CloudFront, DynamoDB, Route 53, CloudWatch và SAM CLI để tự động hoá, mở rộng và tối ưu chi phí cho hệ thống.\nKiến trúc tổng thể Dưới đây là kiến trúc tổng thể của hệ thống.\nFrontend: Sử dụng theme Hugo, lưu trữ tĩnh trên Amazon S3 và phân phối qua CloudFront. Backend: Giao tiếp qua RESTful API với API Gateway, xử lý nghiệp vụ bằng AWS Lambda. Cơ sở dữ liệu: Sử dụng DynamoDB để lưu trữ dữ liệu động, dễ dàng mở rộng. Quản lý hạ tầng: CloudFormation tự động tạo và cấu hình tài nguyên AWS; sử dụng SAM CLI để triển khai và tự động hóa serverless. Tên miền \u0026amp; Quản lý hoạt động: Route 53 quản lý tên miền/DNS; CloudWatch theo dõi, ghi nhận log và cảnh báo cho toàn bộ hệ thống; AWS Certificate Manager cấp SSL miễn phí cho website. Sơ đồ luồng dữ liệu Sơ đồ sau minh họa luồng dữ liệu chính và tương tác giữa các thành phần hệ thống.\n(Chèn sơ đồ luồng dữ liệu hoặc sequence diagram tại đây)\nDanh sách dịch vụ AWS sử dụng API Gateway: Tạo REST API cho giao tiếp frontend-backend. S3: Lưu trữ website tĩnh và tài nguyên website. Lambda: Xử lý logic backend serverless. DynamoDB: Cơ sở dữ liệu NoSQL động, mở rộng dễ dàng. CloudFormation: Quản lý hạ tầng dưới dạng mã (IaC). Route 53: Đăng ký và cấu hình tên miền, DNS. CloudFront: Phân phối nội dung toàn cầu (CDN), tăng tốc truy cập và bảo mật. AWS Certificate Manager: Cấp và quản lý chứng chỉ SSL miễn phí. IAM: Quản lý tài khoản, phân quyền truy cập tài nguyên AWS. CloudWatch: Giám sát, log, cảnh báo hệ thống. SAM CLI: Tự động hóa triển khai tài nguyên serverless. Tính năng chính của website Kiến trúc serverless hoàn toàn trên AWS. Triển khai website động, bảo mật, mở rộng tự động. Giao diện thân thiện với Hugo. Backend động sử dụng RESTful API qua API Gateway \u0026amp; Lambda. Cơ sở dữ liệu động với DynamoDB. Xử lý dữ liệu thời gian thực bằng Lambda \u0026amp; DynamoDB. Tích hợp giám sát, logging, cấu hình DNS, CDN \u0026amp; SSL tự động. Hạ tầng dưới dạng mã (IaC) với CloudFormation \u0026amp; SAM CLI. "
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/",
	"title": "Chuẩn bị môi trường",
	"tags": [],
	"description": "",
	"content": "Trước khi bắt đầu triển khai website thương mại điện tử động sử dụng các dịch vụ AWS như API Gateway, S3, Lambda, CloudFormation, DynamoDB, Route 53, CloudWatch và SAM CLI, bạn cần hoàn thành một số bước chuẩn bị môi trường cơ bản. Những công cụ và dịch vụ này sẽ giúp bạn triển khai ứng dụng một cách nhanh chóng, an toàn và hiệu quả.\nTrong phần này, bạn sẽ thực hiện các bước cài đặt và cấu hình môi trường phát triển cho cả frontend và backend của dự án:\nCài đặt NodeJS và Yarn: Để hỗ trợ việc xây dựng và quản lý frontend. Cài đặt SAM CLI: Để triển khai backend serverless trên AWS. Tạo tài khoản AWS và cấu hình IAM: Để thiết lập quyền truy cập và bảo mật cho dự án trên AWS. Cấu hình Google OAuth2 Client ID và Client Secret: Để tích hợp đăng nhập Google bảo mật cho hệ thống. Các bước chuẩn bị này sẽ đảm bảo rằng bạn có môi trường đầy đủ và hoạt động chính xác trước khi tiến hành triển khai các dịch vụ AWS cho dự án của mình.\n⚠️ Lưu ý: Hãy chắc chắn rằng bạn đã cài đặt đầy đủ các công cụ trước khi bắt đầu làm việc với các dịch vụ AWS. Nếu không, bạn có thể gặp phải sự cố trong quá trình triển khai.\nNội dung Cài đặt NodeJS Cài đặt Yarn cho frontend Cài đặt SAM CLI cho backend Tạo tài khoản \u0026amp; cấu hình IAM Tạo Google OAuth2 Project "
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/2.1-installnodejs/",
	"title": "Cài đặt NodeJS",
	"tags": [],
	"description": "",
	"content": "NodeJS là một môi trường chạy JavaScript mạnh mẽ và phổ biến, được sử dụng để phát triển các ứng dụng web động. Trong bước này, bạn sẽ cài đặt NodeJS trên các hệ điều hành để phát triển website thương mại điện tử động của mình.\nBước 1: Cài đặt NodeJS Tải NodeJS từ trang chính:\nTruy cập trang chính của NodeJS tại Node.js và tải phiên bản LTS cho hệ điều hành của bạn (Windows, macOS, hoặc Linux). Tải bản .msi cho Windows, .pkg cho macOS hoặc .tar.xz cho Linux. Cài đặt NodeJS trên Windows:\nSau khi tải file .msi, mở file và làm theo hướng dẫn cài đặt. Chắc chắn rằng bạn đã tích chọn Add to PATH trong quá trình cài đặt. Cài đặt NodeJS trên macOS:\nCài đặt thông qua Homebrew: brew install node Cài đặt NodeJS trên Linux (Ubuntu):\nSử dụng lệnh sau để cài đặt NodeJS:\nsudo apt install nodejs\rKiểm tra cài đặt:\nSau khi cài đặt, mở terminal (hoặc Command Prompt trên Windows) và nhập lệnh sau để kiểm tra phiên bản NodeJS:\nnode -v\rNếu cài đặt thành công, bạn sẽ thấy phiên bản NodeJS hiện ra.\nVí dụ\nSau khi cài đặt, mở terminal (hoặc Command Prompt trên Windows) và nhập lệnh sau để kiểm tra phiên bản NodeJS:\nC:\\Users\\thuan\u0026gt;node -v\rv20.17.0\rNodeJS đã được cài đặt thành công! Bạn có thể bắt đầu xây dựng các ứng dụng JavaScript cho frontend và backend của website.\nBước 2: Cài đặt npm Npm (Node Package Manager) là công cụ dùng để quản lý các thư viện và gói phần mềm trong dự án NodeJS.\nTruy cập vào thư mục Frontend trong code và gõ lệnh:\nnpm i\rKiểm tra npm:\nNpm được cài đặt tự động khi bạn cài đặt NodeJS.\nKiểm tra phiên bản npm bằng lệnh:\nnpm -v\rCập nhật npm (nếu cần): Cập nhật npm (nếu cần)\nnpm install -g npm\r"
},
{
	"uri": "https://thuananwork.github.io/vi/3-deploybackend/",
	"title": "Triển khai backend",
	"tags": [],
	"description": "",
	"content": "Triển khai backend cho website thương mại điện tử động được thực hiện bằng cách sử dụng AWS SAM CLI kết hợp với CloudFormation. Với các công cụ này, bạn sẽ dễ dàng triển khai các dịch vụ serverless như API Gateway, Lambda, và DynamoDB.\nCác công cụ chính được sử dụng: SAM CLI: Công cụ dòng lệnh giúp phát triển, kiểm tra và triển khai các ứng dụng serverless. SAM CLI giúp bạn dễ dàng triển khai API Gateway, Lambda function, và các tài nguyên serverless khác trên AWS. CloudFormation: Dịch vụ quản lý hạ tầng dưới dạng mã (Infrastructure as Code), cho phép bạn tự động hóa việc triển khai và quản lý các tài nguyên AWS. Trong phần này, bạn sẽ học cách triển khai backend serverless cho website của mình bằng SAM CLI, bao gồm việc tạo các tài nguyên như API Gateway, Lambda, và DynamoDB.\nLưu ý: Hãy đảm bảo rằng bạn đã hoàn thành các bước chuẩn bị môi trường (bao gồm cài đặt SAM CLI và cấu hình AWS IAM) trước khi bắt đầu triển khai backend.\nNội dung Triển khai backend bằng SAM CLI/CloudFormation Kiểm tra trạng thái và log backend sau khi triển khai "
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/2.2-installyarn/",
	"title": "Cài đặt Yarn",
	"tags": [],
	"description": "",
	"content": "Yarn là một trình quản lý gói (package manager) cho JavaScript, được sử dụng rộng rãi trong các dự án frontend để giúp quản lý các thư viện và gói phần mềm một cách hiệu quả. Yarn giúp giải quyết các vấn đề về tốc độ cài đặt, sự nhất quán và bảo mật khi quản lý các thư viện cho dự án.\nBước 1: Clone dự án về máy Clone mã nguồn dự án từ Github: Mở terminal và chạy lệnh sau để tải source code về: git clone https://github.com/thuan120710/Fcjwebfashionthuan_2025 Bước 2: Cài đặt Yarn Cách 1: Cài đặt Yarn tự động thông qua npm Di chuyển vào thư mục frontend của dự án: cd Fcjwebfashionthuan_2025/frontend Cài đặt các dependency (Yarn sẽ tự động được sử dụng nếu dự án có file yarn.lock): Chạy lệnh: npm install Nếu dự án có file yarn.lock, nên dùng: yarn install Lệnh này sẽ cài đặt đầy đủ các thư viện cần thiết cho frontend dự án, bao gồm cả Yarn nếu có trong dependency. Cách 2: Cài đặt Yarn thủ công (nếu cần) Nếu máy tính bạn chưa có Yarn hoặc muốn cài đặt mới hoàn toàn, làm theo hướng dẫn sau:\nCài đặt Yarn thông qua npm:\nYarn có thể được cài đặt thông qua npm. Đảm bảo rằng bạn đã cài đặt NodeJS và npm trước khi tiếp tục. Mở terminal và chạy lệnh sau để cài đặt Yarn: npm install -g yarn Cài đặt Yarn trên macOS (qua Homebrew): Nếu bạn đang sử dụng macOS, có thể dùng lệnh:\nbrew install yarn Cài đặt Yarn trên Linux (Ubuntu):\nTrên Linux, bạn có thể sử dụng apt để cài đặt Yarn: sudo apt update \u0026amp;\u0026amp; sudo apt install yarn Yarn đã được cài đặt thành công! Bạn có thể bắt đầu quản lý các thư viện frontend cho dự án của mình.\nBước 2: Kiểm tra cài đặt Yarn Kiểm tra phiên bản Yarn:\nSau khi cài đặt thành công, bạn có thể kiểm tra phiên bản Yarn bằng lệnh:\nyarn --version\rNếu hiển thị ra phiên bản yarn, bạn đã cài đặt yarn thành công:\nC:\\Users\\thuan\u0026gt;yarn --version\r1.22.22\rKiểm tra cài đặt Yarn:\nĐể đảm bảo rằng Yarn đã được cài đặt chính xác, bạn có thể chạy lệnh sau để kiểm tra trạng thái:\nyarn "
},
{
	"uri": "https://thuananwork.github.io/vi/4-testbackendapi/",
	"title": "Kiểm thử API backend với Postman",
	"tags": [],
	"description": "",
	"content": "Kiểm thử API backend với Postman Sau khi triển khai backend thành công với API Gateway và Lambda, bước tiếp theo là kiểm thử các API để xác nhận hệ thống backend hoạt động đúng trước khi kết nối với frontend.\nPostman là công cụ mạnh mẽ và phổ biến nhất giúp bạn gửi các request (GET, POST, PUT, DELETE, \u0026hellip;) đến endpoint API, xem kết quả trả về, kiểm tra logic xử lý cũng như debug lỗi.\nBạn có thể tải Postman tại: Download Postman\nMục tiêu phần này:\nHướng dẫn cách lấy endpoint API Gateway vừa deploy trên AWS để làm việc với Postman. Thực hành gửi các request GET/POST tới API, phân tích kết quả trả về để kiểm tra tính đúng đắn của backend. Nhận biết và xử lý một số lỗi phổ biến trong quá trình test API. Nội dung phần này bao gồm:\nLấy endpoint API Gateway:\nHướng dẫn tìm, copy URL endpoint trên AWS Console dùng cho việc kiểm thử API. Gửi request GET/POST để kiểm tra response backend:\nHướng dẫn chi tiết cách gửi các request GET/POST với Postman, nhập dữ liệu, kiểm tra kết quả response từ backend. Lưu ý:\nTrước khi test API bằng Postman, hãy chắc chắn rằng backend đã deploy thành công và không có lỗi ở các bước trước đó (CloudFormation/Lambda đều trạng thái thành công).\nKết thúc phần này, bạn sẽ:\nBiết cách lấy endpoint API Gateway để dùng cho kiểm thử. Sử dụng thành thạo Postman gửi các request GET/POST tới backend. Phân tích, kiểm tra kết quả trả về, và sẵn sàng kết nối frontend với backend đã kiểm thử thành công. Nội dung Lấy endpoint API Gateway Gửi request GET/POST để kiểm tra response backend "
},
{
	"uri": "https://thuananwork.github.io/vi/3-deploybackend/3.1-deploy-backend/",
	"title": "Triển khai backend bằng SAM CLI/CloudFormation",
	"tags": [],
	"description": "",
	"content": "Triển khai Backend bằng SAM CLI/CloudFormation Trong phần này, bạn sẽ triển khai backend cho website thương mại điện tử động của mình bằng SAM CLI và CloudFormation. Chúng ta sẽ sử dụng file template.yaml có sẵn trong dự án để tự động tạo các tài nguyên như API Gateway, Lambda, và DynamoDB.\nBước 1: Cấu hình AWS CLI Trước khi bắt đầu sử dụng SAM CLI để triển khai, bạn cần phải cấu hình AWS CLI với các thông tin đăng nhập của tài khoản AWS. Điều này giúp SAM CLI có thể sử dụng các quyền truy cập đã được cấp cho IAM User của bạn.\nChạy lệnh aws configure:\nMở terminal và nhập lệnh sau để cấu hình AWS CLI:\naws configure\rNhập thông tin cấu hình:\nAWS Access Key ID: Nhập Access Key ID mà bạn đã tạo khi tạo IAM User.\nAWS Secret Access Key: Nhập Secret Access Key tương ứng với Access Key ID.\nDefault region name: Nhập ap-southeast-1 (cho Singapore).\nDefault output format: Bạn có thể nhập json , hoặc để mặc định None. Sau khi hoàn tất cấu hình, AWS CLI sẽ lưu thông tin cấu hình trong file ~/.aws/credentials (Linux/macOS) hoặc C:\\Users\\\u0026lt;username\u0026gt;\\.aws\\credentials (Windows).\nBước 2: Triển khai Backend bằng SAM CLI Kiểm tra file template.yaml:\nNếu bạn chưa có file template.yaml, hãy kiểm tra trong thư mục dự án của bạn. File này sẽ định nghĩa các tài nguyên như API Gateway, Lambda, và DynamoDB. Nếu file này có sẵn trong dự án, đảm bảo rằng nó đã được cấu hình chính xác cho các tài nguyên bạn cần. Build dự án:\nSau khi đảm bảo file template.yaml đã có trong dự án\nTruy cập vào thư mục backend của dự án sử dụng SAM CLI để build dự án:\nsam build\rNếu bạn thấy dòng chữ Build Succeeded bạn đã cài đặt thành công SAM CLI Validate Template:\nKiểm tra lại cấu hình của file template.yaml để chắc chắn rằng không có lỗi cú pháp hoặc cấu hình:\nGõ lệnh sam validate để kiểm tra file template.yaml:\nsam validate\rNếu bạn thấy thông báo như bên dưới, thì file template.yaml của bạn hợp lệ. Triển khai tài nguyên lên AWS:\nSau khi hoàn tất build và validate, bạn có thể triển khai tài nguyên lên AWS bằng lệnh:\nsam deploy --guided\rKhi sử dụng SAM CLI để triển khai, bạn sẽ được yêu cầu nhập các thông tin cấu hình.\nStack Name: sam-app AWS Region: ap-southeast-1 Confirm changes before deploy: y Allow SAM CLI IAM role creation: y Disable rollback: n (Không tắt rollback) ExpressApiFunction has no authentication. Is this okay?: y Save arguments to configuration file: y SAM configuration file: Gõ phím Enter SAM configuration environment: Gõ phím Enter Khi sử dụng SAM CLI để triển khai, bạn sẽ được yêu cầu nhập các thông tin cấu hình.\nDeploy this changeset: y Bạn đợi khoảng 5 phút để cấu hình serverless (API Gateway, Lambda, DynamoDB, v.v.) từ máy tính của bạn lên AWS. Xác nhận triển khai:\nSau khi triển khai thành công, SAM CLI sẽ cung cấp thông tin về các tài nguyên đã được tạo. Bạn có thể kiểm tra API Gateway, Lambda function, S3, CLOUD FOUMATION và DynamoDB trong AWS Management Console để xác nhận các tài nguyên đã được tạo đúng. Backend của bạn đã được triển khai thành công! Các tài nguyên như API Gateway, Lambda function và DynamoDB đã được tự động tạo. Bạn có thể kiểm tra trên AWS Console.\nTruy cập vào API Gateway bạn sẽ thấy API Gateway đã được tạo Truy cập vào Lambda function bạn sẽ thấy Lambda function đã được tạo Truy cập vào Amazon S3 bạn sẽ thấy Amazon S3 đã được tạo Truy cập vào Cloud Foumation bạn sẽ thấy Cloud Foumation đã được tạo Truy cập vào DynamoDB bạn sẽ thấy DynamoDB đã được tạo "
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/2.3-installsamcli/",
	"title": "Cài đặt SAM CLI",
	"tags": [],
	"description": "",
	"content": "AWS SAM CLI là một công cụ dòng lệnh giúp bạn phát triển, đóng gói backend và triển khai các ứng dụng serverless sử dụng AWS Lambda, API Gateway và các dịch vụ AWS serverless khác. Trong bước này, bạn sẽ cài đặt SAM CLI để phát triển backend serverless cho website thương mại điện tử động của mình.\nBước 1: Cài đặt SAM CLI Cài đặt trên Windows: Truy cập vào trang Installing the AWS SAM CLI để tải bản cài đặt SAM CLI cho Windows. Click chọn Window Chạy tệp cài đặt .msi và làm theo các hướng dẫn để hoàn tất quá trình cài đặt. Mở Termiral gõ sam-version Cài đặt trên macOS:\nSử dụng Homebrew để cài đặt SAM CLI:\nbrew tap aws/tap\rbrew install aws-sam-cli\rCài đặt trên Linux (Ubuntu):\nTrên Linux, bạn có thể sử dụng apt để cài đặt SAM CLI:\nsudo apt-get update\rsudo apt-get install aws-sam-cli\rCài đặt SAM CLI từ nguồn (nếu cần):\nNếu bạn không muốn sử dụng các phương pháp trên, bạn có thể cài đặt SAM CLI từ mã nguồn. Hướng dẫn chi tiết có tại: Install SAM CLI from source. SAM CLI đã được cài đặt thành công! Bạn có thể bắt đầu phát triển và triển khai các ứng dụng serverless với AWS.\nBước 2: Kiểm tra cài đặt SAM CLI Kiểm tra phiên bản SAM CLI: Sau khi cài đặt thành công, mở terminal (hoặc Command Prompt trên Windows) và nhập lệnh sau để kiểm tra phiên bản SAM CLI:\nsam --version\rKiểm tra cài đặt SAM CLI: Nếu lệnh trên hiển thị thông tin về phiên bản của SAM CLI, bạn đã cài đặt thành công công cụ này.\nC:\\Users\\thuan\u0026gt;sam --version\rSAM CLI, version 1.141.0\r"
},
{
	"uri": "https://thuananwork.github.io/vi/3-deploybackend/3.2-check-status-log-backend/",
	"title": "Kiểm tra trạng thái và log backend sau khi triển khai",
	"tags": [],
	"description": "",
	"content": "Kiểm tra trạng thái và log backend sau khi triển khai Sau khi bạn đã deploy backend lên AWS với SAM CLI và CloudFormation, bước tiếp theo cực kỳ quan trọng là kiểm tra trạng thái tài nguyên và xem log backend để đảm bảo mọi thành phần đã hoạt động đúng.\nĐảm bảo API Gateway, Lambda, DynamoDB… đều được tạo thành công và đang hoạt động. Phát hiện và sửa lỗi kịp thời nếu gặp sự cố deploy hoặc lỗi logic. Chuẩn bị sẵn sàng cho bước kiểm thử API bằng Postman hoặc frontend. Kiểm tra trạng thái Stack và tài nguyên trên CloudFormation\nTruy cập AWS CloudFormation Console. Chọn Stack vừa deploy (sam-app). Kiểm tra tab Status: Nếu status là CREATE_COMPLETE hoặc UPDATE_COMPLETE bạn đã deploy thành công. Ở tab Resources, xem danh sách tài nguyên đã tạo (API Gateway, Lambda, DynamoDB, S3…). Nếu thấy status ROLLBACK, FAILED, click tab Events để xem chi tiết lỗi và xác định nguyên nhân.\nKiểm tra log Lambda bằng CloudWatch\nTrong AWS Console, vào Lambda → chọn hàm vừa deploy. Cuộn xuống và click vào tab Monitor, chọn vào View CloudWatch logs để truy cập log chi tiết. Cuộn xuống và click vào tab Log streams, chọn Log stream đầu tiên. Mỗi lần có request (GET/POST…), Lambda sẽ ghi log vào CloudWatch – tại đây bạn có thể:\nXem request đã nhận gì. Response trả về như thế nào. Debug lỗi nếu code bị crash hoặc trả về lỗi 500. Xác minh hoạt động của API Gateway\nTrong AWS Console, vào API Gateway → chọn API bạn vừa tạo. Vào mục Stages → chọn stage → chọn prod.\nCopy Invoke URL để chuẩn bị test bằng Postman/curl ở bước tiếp theo. Nếu bạn xác minh xong toàn bộ resource đều hoạt động tốt, log không có lỗi nghiêm trọng, bạn đã sẵn sàng test API backend bằng Postman hoặc tích hợp frontend!\n"
},
{
	"uri": "https://thuananwork.github.io/vi/4-testbackendapi/4.1-endpoint-api-gateway/",
	"title": "Lấy endpoint API Gateway",
	"tags": [],
	"description": "",
	"content": "Lấy endpoint API Gateway Sau khi triển khai backend bằng SAM CLI/CloudFormation, hệ thống sẽ tự động tạo ra một địa chỉ endpoint cho API Gateway. Đây là địa chỉ bạn sẽ sử dụng để gửi các request kiểm thử bằng Postman, curl hoặc tích hợp frontend sau này.\nNote:\nSử dụng endpoint của phần trước nếu bạn đã lưu\nCác bước thực hiện:\nTruy cập AWS Management Console\nĐăng nhập vào AWS Console. Chọn dịch vụ API Gateway trong danh sách dịch vụ AWS. Chọn API vừa deploy\nTại giao diện API Gateway, bạn sẽ thấy danh sách các API đã được tạo. Tìm và click vào tên API mà bạn vừa triển khai. Lấy endpoint ở mục Stages\nỞ thanh menu bên trái, chọn Stages. Click vào stage mà bạn đã deploy. Ngay phía trên, bạn sẽ thấy Invoke URL. Đây chính là endpoint của API Gateway mà bạn cần sử dụng cho việc kiểm thử. Copy URL này Kiểm tra lại endpoint\nBạn có thể copy endpoint này, dán vào trình duyệt hoặc Postman để kiểm tra phản hồi cơ bản. Thông thường, nếu chưa cấu hình resource cụ thể (ví dụ: /products), truy cập trực tiếp endpoint gốc sẽ báo lỗi “Missing Authentication Token” hoặc trả về HTTP 403. Điều này là bình thường, bạn chỉ cần thêm route resource đúng với API của mình khi test. Mẹo:\nNên lưu lại endpoint này ở file README dự án hoặc note cá nhân, tránh phải truy cập lại AWS Console nhiều lần khi test API.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/",
	"title": "Triển khai frontend",
	"tags": [],
	"description": "",
	"content": "Triển khai frontend Sau khi backend đã sẵn sàng và đã kiểm thử thành công, bước tiếp theo là triển khai phần frontend của website lên AWS S3 để tạo website tĩnh, giúp tối ưu chi phí và tốc độ tải trang.\nĐồng thời, bạn sẽ cấu hình hosting, cache, CORS để frontend hoạt động mượt mà, bảo mật khi kết nối với API backend.\nMục tiêu phần này:\nHướng dẫn upload và triển khai code frontend lên AWS S3 Bucket. Bật static website hosting, cấu hình cache và CORS để frontend truy cập ổn định, bảo mật. Cấp quyền public cho S3 Bucket để website truy cập công khai. Kết nối frontend với endpoint API backend đã kiểm thử thành công ở các bước trước. Lưu ý:\nHãy đảm bảo rằng bạn đã cài yarn trong thư mục dự án của mình\nKết thúc phần này, bạn sẽ:\nTriển khai website frontend bài bản trên S3, đảm bảo mọi người đều có thể truy cập. Làm chủ việc cấu hình hosting, cache, CORS – giúp website tải nhanh, an toàn và tương thích với backend. Biết cách cấp quyền public cho S3 bucket, tránh lỗi 403 khi truy cập website. Sẵn sàng nâng cấp hệ thống với domain tùy chỉnh, CloudFront, hoặc các tính năng mới trong các bước tiếp theo. Nội dung Triển khai frontend lên S3 Bucket Bật static hosting, cấu hình CORS Cấp quyền public cho S3 Bucket Cấu hình Google OAuth2 Client ID và Client Secret Kết nối frontend với API backend "
},
{
	"uri": "https://thuananwork.github.io/vi/4-testbackendapi/4.2-get-post-response/",
	"title": "Gửi request GET/POST để kiểm tra response backend",
	"tags": [],
	"description": "",
	"content": "Gửi request GET/POST để kiểm tra response backend đăng nhập Sau khi đã lấy được endpoint API Gateway, bạn cần gửi các request POST và GET đến API để xác nhận backend hoạt động đúng. Việc này thường thực hiện bằng Postman – công cụ test API phổ biến nhất hiện nay.\nCác bước thực hiện:\nKiểm thử phương thức POST bằng Postman\nMở Postman, chọn New → HTTP Request.\nChọn method là POST.\nNhập endpoint đầy đủ vào ô URL, ví dụ:\nhttps://ars3538v1i.execute-api.ap-southeast-1.amazonaws.com/Prod/api/users Chuyển sang tab Body → chọn raw → chọn JSON. Nhập dữ liệu mẫu vào ô body như sau:\n{ \u0026#34;username\u0026#34;: \u0026#34;AdminUser\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;firstcloudjourney@example.com\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;AdminUser123@\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;Admin\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;User\u0026#34;, \u0026#34;isAdmin\u0026#34;: true, \u0026#34;googleId\u0026#34;: null, \u0026#34;avatar\u0026#34;: \u0026#34;https://i.imgur.com/avatar.jpg\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;0912345678\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;isDeleted\u0026#34;: false } Nhấn Send để gửi request.\nNếu API hoạt động đúng, bạn sẽ nhận được response xác nhận.\nCopy lại token để sử dụng cho các request sau. Nếu API yêu cầu xác thực (API Key, Bearer Token, v.v.) hoặc cần custom header, hãy bổ sung ở tab Headers của Postman trước khi gửi request!\nKiểm thử phương thức GET đăng nhập bằng Postman\nTruy cập vào DynamoDB trên AWS Controller\nChọn table chọn bảng ShopUser Chọn Explore table items để kiểm tra dữ liệu của user vừa tạo Cuộn xuống và chỉnh sửa quyền isAdmin của user vừa tạo thành true Tạo một request mới trong Postman, chọn method GET.\nNhập Authorization đầy đủ vào ô URL, ví dụ:\nhttps://ars3538v1i.execute-api.ap-southeast-1.amazonaws.com/Prod/api/users Tại Authorization chọn: Bearer Token\nTại ô Token: nhập token đã lưu trước đó\nNhấn Send để gửi request. Nếu API hoạt động bình thường, bạn sẽ nhận được response trả về thông tin của các user đang tồn tại trong database.\nKiểm tra mã trạng thái HTTP (là 200 OK), nội dung body response. Bạn có thể test các chức năng khác của dự án bằng cách truy cập vào code để lấy url của api\nPhân tích kết quả và xử lý lỗi thường gặp\nNếu nhận được response dữ liệu đúng → backend đã hoạt động chính xác. Nếu gặp lỗi như 403 Forbidden, 401 Unauthorized, Missing Authentication Token: Kiểm tra lại endpoint đã đúng route resource chưa. Xem lại config API Gateway và mapping template. Kiểm tra log Lambda trên CloudWatch để xác định lỗi chi tiết. Nếu mã lỗi 500 Internal Server Error: Thường là do code Lambda gặp lỗi. Vào CloudWatch log để debug. Kết luận:\nViệc kiểm thử API bằng POST/GET là bước xác nhận backend đã hoạt động hoàn chỉnh trước khi tích hợp với frontend hoặc triển khai lên môi trường thật. Nếu gặp lỗi, nên tra log trên CloudWatch hoặc kiểm tra lại cấu hình API Gateway và Lambda để xử lý kịp thời.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/2.4-createiam/",
	"title": "Tạo tài khoản và cấu hình IAM",
	"tags": [],
	"description": "",
	"content": "Tạo tài khoản và cấu hình IAM AWS Identity and Access Management (IAM) cho phép bạn quản lý quyền truy cập đến tài nguyên AWS một cách an toàn. Trong bước này, bạn sẽ tạo một IAM user, cấp quyền truy cập thích hợp và cấu hình Access Key để sử dụng trong các bước tiếp theo của workshop.\nTạo IAM User Truy cập trang AWS Management Console và vào dịch vụ IAM. Trong thanh điều hướng bên trái, chọn Users và nhấn Create users ở menu bên trái. Tạo người dùng IAM: Đặt tên User name là AdminUser (hoặc tên bạn muốn). Tích chọn Provide user access to the AWS Management Console - optional Tại phần User type chọn I want to create an IAM user Chọn Custom password - Nhập mật khẩu của bạn Bỏ chọn Users must create a new password at next sign-in - Recommended Chọn Next Cấp quyền truy cập cho người dùng: Chọn Attach policies directly. Tìm kiếm và chọn policy AWSCloudFormationFullAccess, AmazonDynamoDBFullAccess, AWSLambda_FullAccess, AmazonS3FullAccess, AmazonAPIGatewayAdministrator, IAMFullAccess và tích chọn để thêm các quyền cần thiết cho dự án. Tiếp theo kéo xuống và nhấn Next Kiểm tra lại thông tin tại Permissions summary Nhấn Create user để tạo tài khoản AWS IAM Iam User đã được tạo thành công Chọn download .csv file để lưu trữ thông tin tài khoản Click view user để xem thông tin chi tiết Tạo Access Key Hiển thị và lưu Access Key và Secret Access Key: Chọn vào Create access key để tạo access key cho user. Tích chọn Command Line Interface (CLI) và nhấn Next. Click vào Show để hiển thị giá trị Secret access key. Click vào Create access key. Click vào Chọn Download .csv file để lưu trữ thông tin. Và bấm vào done Hãy lưu trữ Access key và Secret access key ở nơi an toàn. Chúng sẽ cần thiết cho việc truy cập các dịch vụ AWS qua API, CLI hoặc SDK.\nKiểm tra và thấy Access Key đã được tạo thành công. Lưu thông tin Access Key: Hãy lưu lại cặp giá trị Access key ID + Secret access key này vì bạn sẽ cần nó cho các bước tiếp theo của workshop. Bạn cũng có thể click Download .csv để tải xuống file chứa Access key ID và Secret access key dưới dạng CSV. "
},
{
	"uri": "https://thuananwork.github.io/vi/6-ssl-s3-static/",
	"title": "Thiết lập trang web SSL S3 Static",
	"tags": [],
	"description": "",
	"content": "Thiết lập trang website static có SSL trên S3 Nếu bạn muốn triển khai một website tĩnh trên S3 có tích hợp SSL (HTTPS), bạn không cần viết lại từ đầu.\nBạn có thể xem bài hướng dẫn chi tiết, từng bước tại link sau:\n👉 Hướng dẫn thiết lập website static có SSL trên S3\nBài viết này sẽ hướng dẫn bạn:\nTạo và cấu hình S3 Bucket để lưu trữ website tĩnh. Thiết lập CloudFront làm CDN để tăng tốc và bảo mật website. Cấu hình AWS Certificate Manager (ACM) để cấp phát SSL miễn phí cho website. Kết nối domain tùy chỉnh với Route 53. Tích hợp đầy đủ HTTPS cho website của bạn một cách dễ dàng. Lưu ý:\nKhông cần thực hiện lại các bước đã trình bày chi tiết trong tài liệu trên, chỉ cần làm theo hướng dẫn là bạn sẽ triển khai được website tĩnh bảo mật với SSL trên AWS!\n"
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/5.1-frontend-s3/",
	"title": "Triển khai frontend lên S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Triển khai frontend lên S3 Bucket Để website frontend hoạt động online, bạn sẽ upload toàn bộ mã nguồn đã build lên AWS S3 Bucket. S3 sẽ đóng vai trò là hosting tĩnh, giúp phân phối website với chi phí thấp và tốc độ nhanh.\nCác bước thực hiện:\nBước 1: Đóng gói mã nguồn frontend Mở termiral trên Vscode và truy cập vào thư mục frontend. Copy lệnh sau và dán vào termiral yarn build Thư mục build sẽ chứa tất cả file tĩnh cần upload. Bạn đợi khoảng 1 phút để build dự án Bước 2: Tạo S3 Bucket Tạo S3 Bucket để chứa frontend Truy cập AWS S3 Console. Click Create bucket. Đặt tên bucket, ví dụ: fcjfashionshop.com. Region: Chọn cùng region với backend (nên là ap-southeast-1 cho đồng bộ). Tắt “Block all public access”. Tích chọn vào I acknowledge that the current settings might result in this bucket and the objects within becoming public. , xác nhận cảnh báo để website có thể public Nhấn Create bucket để hoàn tất. Cẩn thận:\nBucket chứa website tĩnh cần mở quyền public read cho tất cả mọi người. Tuy nhiên không nên upload dữ liệu nhạy cảm vào đây vì bất cứ ai có link đều truy cập được!\nTạo S3 Bucket để lưu trữ ảnh upload/avatar\nTruy cập AWS S3 Console. Click Create bucket. Đặt tên bucket, ví dụ: uploads-avatars-2025 (nên dùng tên dễ nhận biết, không dấu). Region: Chọn cùng region với hệ thống. Tắt “Block all public access” (bỏ tick), xác nhận cảnh báo để cho phép public file ảnh. Tích chọn vào I acknowledge that the current settings might result in this bucket and the objects within becoming public. , xác nhận cảnh báo để website có thể public. Nhấn Create bucket để hoàn tất. Cẩn thận:\nBucket lưu trữ ảnh upload/avatar nếu mở quyền public thì bất kỳ ai có đường dẫn đều có thể xem ảnh. Không nên upload thông tin nhạy cảm vào bucket này!\nBước 3: Upload mã nguồn build Frontend lên S3 bucket bằng AWS CLI Đảm bảo bạn đã cài đặt và cấu hình AWS CLI (đã chạy aws configure).\nThực hiện lệnh:\ncd frontend\raws s3 cp build/ s3://fcjfashionshop.com/ --recursive Tham số \u0026ndash;recursive giúp upload tất cả file và folder con bên trong build.\nKiểm tra lại nội dung bucket\nVào lại bucket trên AWS Console, xác nhận toàn bộ file (index.html, main.js, CSS, ảnh…) đã được upload thành công.\nCó thể click trực tiếp vào file (VD: index.html) và copy URL tại Object URL để kiểm tra file đã public chưa (phải xem được file HTML/raw trên trình duyệt).\nBạn có thể kiểm tra các file và folder đã upload lên s3 bằng cách truy cập vào Object\nSau khi hoàn thành các bước trên, bạn đã đưa website frontend của mình lên AWS S3.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/5.2-enable-static-hosting/",
	"title": "Bật static hosting, cấu hình CORS",
	"tags": [],
	"description": "",
	"content": "Bật static hosting, cấu hình CORS và cấp quyền cho S3 Bucket Sau khi đã upload mã nguồn frontend lên S3 Bucket, bạn cần bật tính năng static website hosting, cấu hình file index, error, thiết lập policy CORS và cấp quyền public để website chạy ổn định, truy cập được từ trình duyệt và có thể kết nối tới API backend.\nBước 1: Bật static hosting và cấu hình CORS Bật static website hosting cho bucket\nTruy cập vào bucket frontend trên AWS S3 Console. Chọn tab Properties. Kéo xuống phần Static website hosting, nhấn Edit. Chọn Enable. Nhập tên file index.html cho trường Index document. Có thể nhập thêm index.html cho trường Error document (nên dùng nếu bạn triển khai SPA). Lưu lại cài đặt. AWS sẽ sinh ra một Website endpoint dạng: http://fcjfashionshop.com.s3-website-ap-southeast-1.amazonaws.com Copy URL này để dùng cho bước sau. Cấu hình CORS cho bucket\nVào tab Permissions → cuộn xuống tìm mục CORS configuration → chọn Edit. Thêm cấu hình mẫu sau (JSON) để cho phép frontend truy cập tài nguyên hoặc upload ảnh lên S3 từ domain khác: [ { \u0026#34;AllowedOrigins\u0026#34;: [\u0026#34;*\u0026#34;], \u0026#34;AllowedMethods\u0026#34;: [\u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;DELETE\u0026#34;], \u0026#34;AllowedHeaders\u0026#34;: [\u0026#34;*\u0026#34;] } ] Nếu muốn giới hạn chỉ cho domain cụ thể (an toàn hơn): [ { \u0026#34;AllowedOrigins\u0026#34;: [\u0026#34;https://your-domain.com\u0026#34;], \u0026#34;AllowedMethods\u0026#34;: [\u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34;], \u0026#34;AllowedHeaders\u0026#34;: [\u0026#34;*\u0026#34;] } ] Nhấn Save để áp dụng. "
},
{
	"uri": "https://thuananwork.github.io/vi/7-demo/",
	"title": "Demo và chạy dự án",
	"tags": [],
	"description": "",
	"content": "Demo và chạy thử dự án Để giúp bạn hình dung rõ ràng về hoạt động thực tế của hệ thống, dưới đây là video demo quá trình chạy thử website thương mại điện tử động đã hoàn thiện. Video này trình diễn đầy đủ các tính năng chính, được thực hiện trực tiếp trên giao diện web.\nVideo demo tính năng dự án Các tính năng đã được kiểm thử Đăng ký tài khoản Đăng nhập thường Đăng nhập với Google Admin tạo danh mục sản phẩm Admin tạo thương hiệu Admin tạo mã giảm giá Thống kê (doanh thu, số lượng đơn/sản phẩm) Đặt sản phẩm Thêm vào giỏ hàng Thanh toán Xuất hóa đơn Video đã ghi lại toàn bộ quá trình test tính năng trên giao diện website thật, đảm bảo quy trình và trải nghiệm của người dùng cuối. Nếu bạn có thắc mắc về từng thao tác, có thể xem kỹ video hoặc liên hệ để được giải đáp thêm.\nKết luận:\nBạn vừa xem demo thực tế website thương mại điện tử động với đầy đủ chức năng trên nền tảng AWS Serverless. Mọi thao tác đều được xác thực qua video, đảm bảo tính minh bạch và hiệu quả triển khai.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/2-prerequiste/2.5-create-google-oauth2/",
	"title": "Tạo Google OAuth2 Project",
	"tags": [],
	"description": "",
	"content": "Tạo Google OAuth2 Project Để tích hợp chức năng đăng nhập Google (Google Sign-In) cho website thương mại điện tử, bạn cần đăng ký tạo 1 project Google OAuth2 Project.\nCác bước thực hiện:\nTruy cập Google Cloud Console\nMở Google Cloud Console. Đăng nhập bằng tài khoản Google của bạn. Tạo mới một Project (nếu chưa có)\nNhấn Select a project \u0026gt; New Project. Đặt tên project, chọn vị trí, nhấn Create. Tạo project thành công - click Select a project. Chọn vào project FcjFashionShop vừa tạo. Kích hoạt API Google OAuth2\nTại Quick access chọn vào mục API \u0026amp; Services.\nHoặc trong menu bên trái, chọn APIs \u0026amp; Services Chọn Library. Gõ Google+ API vào ô tìm kiếm và nhấn Enter. Chọn vào dịch vụ Google+ API. Bạn chọn Enable. Bạn chỉ cần tạo Google OAuth2 Project và enable các API cần thiết ở bước chuẩn bị này. Việc tạo OAuth Consent Screen và cấu hình Client ID/Client Secret sẽ thực hiện ở các bước tiếp theo sau khi đã có domain/frontend URL cụ thể.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/5.3-s3-bucket-permission/",
	"title": "Cấp quyền public cho S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Cấp quyền public cho S3 Bucket Để truy cập được vào giao diện web bạn cần phải cấu hình permission cho S3 Bucket chứa frontend.\nBước 1: Cấp quyền public cho S3 Bucket Cấp quyền cho Bucket Frontend\nTruy cập Permissions của bucket, cuộn xuống mục Bucket policy → Edit. Thêm policy cho phép public đọc file, ví dụ: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::fcjfashionshop.com/*\u0026#34; } ] } Nhấn Save để áp dụng. Cấp quyền cho Bucket upload avatar (nếu có)\nVào tab Permissions của bucket → Bucket policy. Thêm policy cho phép public đọc file, ví dụ: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::uploads-avatars-2025/*\u0026#34; } ] } Nhấn Save để áp dụng. Bước 2: Kiểm tra hoạt động website Dùng link Website endpoint truy cập thử website. Nếu index.html tải thành công, website đã hoạt động trên S3. Nếu gặp lỗi 403/404: Kiểm tra lại quyền bucket (bucket policy). Đảm bảo đã bật static hosting. Xem lại tên file index/error đúng chính tả. Lưu ý:\nChỉ nên dùng \u0026quot;*\u0026quot; cho development/test. Khi đưa lên production, hãy cấu hình đúng domain website trong AllowedOrigins để tăng bảo mật.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/8-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Sau khi hoàn tất demo và trải nghiệm dự án, bạn cần dọn dẹp các tài nguyên AWS đã sử dụng để tránh phát sinh chi phí không cần thiết.\nNên xóa S3 Bucket trước khi xóa Stack CloudFormation, để đảm bảo Stack được xóa thành công!\n1. Xóa S3 Bucket chứa frontend và file upload Truy cập AWS S3 Console.\nChọn từng bucket bạn đã tạo cho frontend và upload avatar (ví dụ: fcjshop-frontend-website, uploads-avatars-2025).\nNhấn Empty\nChọn lại fcjshop-frontend-website.\nNhấn Delete\nBạn cũng xóa tương tự với uploads-avatars-2025 2. Xóa Stack bằng CloudFormation Truy cập CloudFormation Console.\nChọn đúng stack bạn đã deploy (ví dụ: fcjfashioshop.com hoặc tên stack của bạn).\nNhấn Delete. Xác nhận thao tác xóa. Bạn cũng xóa tương tự với Stackcòn lại.\nLưu ý:\nSau khi xóa stack CloudFormation, tất cả resource backend như Lambda, API Gateway, DynamoDB table, IAM role\u0026hellip; đều sẽ bị xóa tự động.\nKết luận:\nBạn đã dọn dẹp toàn bộ tài nguyên AWS sử dụng cho dự án, đảm bảo không còn phát sinh chi phí không mong muốn. Nếu muốn thử lại, chỉ cần triển khai lại từ đầu!\nNên kiểm tra lại trang Billing của AWS để đảm bảo không còn dịch vụ nào tính phí ngoài ý muốn.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/5.4-clientid-clientserver/",
	"title": "Cấu hình Google OAuth2 Client ID và Client Secret",
	"tags": [],
	"description": "",
	"content": "Cấu hình Google OAuth2 Client ID và Client Secret Sau khi đã tạo Google OAuth2 Project và bật các API cần thiết ở bước chuẩn bị môi trường, bạn cần tạo OAuth2 Client ID và Client Secret để tích hợp đăng nhập Google cho hệ thống thương mại điện tử.\nCác bước thực hiện:\nTruy cập vào Google Cloud Console\nMở Google Cloud Console và chọn đúng project đã tạo ở bước trước. Tạo OAuth2 Client ID\nVào APIs \u0026amp; Services → Credentials. Click vào + Create Credentials → OAuth client ID. Click vào Configure consent srcreen. Click vào Get Started. Bạn điền các thông tin như sau:\nApp name: FcjFashionShop\nUser support email: Nhập email của bạn\nNhấn vào Next Email addresses: Nhập email của bạn.\nNhấn vào Next Tích chọn I agree to the Google API Services: User Data Policy.\nChọn Continue và chọn Create Tại Metrics click vào Create OAuth client Tại Application type chọn Web application\nName: FcjFashionShop Tại Authorized JavaScript origins\nChọn Add URI để thêm URl mới Dán URL của S3 Bucket website endpoint bạn đã copy trước đó Tại Authorized redirect URIs\nChọn Add URI để thêm URl mới Dán URL của Invoke URL của API Gateway bạn đã copy trước đó thay thế đoạn your-API-Gateway-domain trong command bên dưới Nhấn create your-API-Gateway-domain/api/users/auth/google/callback ClientID và ClientSecret đã được tạo thành công, bạn hãy copy và lưu lại để dùng ở bước sau Authorized JavaScript origins: là domain frontend (S3 Static Website endpoint). Authorized redirect URIs: là endpoint backend (API Gateway) xử lý callback Google.\nLưu ý bảo mật:\nKhông public Client Secret lên Github hoặc bất cứ đâu!\nKết luận:\nSau khi hoàn thành các bước này, bạn đã có đủ thông tin để cấu hình Google OAuth2 cho cả backend và frontend, sẵn sàng triển khai tính năng đăng nhập Google cho dự án website thương mại điện tử trên AWS.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/",
	"title": "Website thương mại điện tử",
	"tags": [],
	"description": "",
	"content": "Xây dựng website thương mại điện tử động với AWS Serverless Tổng quan Trong Workshop này, bạn sẽ triển khai một website thương mại điện tử động sử dụng framework Hugo trên nền tảng điện toán đám mây AWS. Bạn sẽ học cách chuẩn bị môi trường, cấu hình tài khoản AWS, xây dựng website với Hugo, và triển khai toàn bộ hệ thống trên các dịch vụ chính của AWS như API Gateway, S3, Lambda, CloudFormation, DynamoDB, Route 53, CloudWatch, đồng thời sử dụng SAM CLI để tự động hoá quá trình triển khai.\nNgoài ra, bạn sẽ được hướng dẫn thiết lập một trang website tĩnh trên S3 với SSL (HTTPS) đầy đủ để tăng bảo mật, giúp website phục vụ tốt hơn cho khách hàng toàn cầu.\nMục tiêu của Workshop Hiểu và thao tác thành thạo các công cụ AWS cần thiết cho một dự án website động. Biết cách chuẩn bị, cài đặt, cấu hình môi trường phát triển cho dự án Hugo. Xây dựng, đóng gói và triển khai website động với Hugo kết hợp các dịch vụ serverless hiện đại của AWS. Thiết kế và triển khai (deploy) với API Gateway, xử lý logic động bằng Lambda, lưu trữ dữ liệu trên DynamoDB, và quản lý website động trên S3. Sử dụng CloudFormation để tự động tạo và cấu hình tài nguyên AWS, theo dõi và giám sát hoạt động hệ thống với CloudWatch. Thiết lập website tĩnh trên S3 có tích hợp SSL (HTTPS) với AWS Certificate Manager và CloudFront. Cấu hình tên miền và phân giải DNS với Route 53 để truy cập website động qua internet. Ứng dụng quy trình DevOps tự động hóa triển khai và vận hành website trên nền tảng AWS một cách hiệu quả. Kiến thức thu được sau Workshop Sau khi hoàn thành Workshop này, bạn sẽ:\nHiểu rõ kiến trúc và quy trình triển khai một website thương mại điện tử động trên nền tảng AWS. Học được cách sử dụng các dịch vụ AWS như API Gateway, S3, Lambda, CloudFormation, DynamoDB, Route 53, CloudWatch và SAM CLI trong một dự án thực tế. Biết cách xây dựng, đóng gói và triển khai website động với Hugo, kết nối frontend với backend qua API Gateway và Lambda. Biết cách thiết lập website tĩnh trên S3, sử dụng CloudFront và AWS Certificate Manager để kích hoạt HTTPS cho website. Thực hành quản lý dữ liệu động với DynamoDB, quản lý hạ tầng tự động bằng CloudFormation. Cấu hình tên miền với Route 53, giám sát hệ thống và log ứng dụng qua CloudWatch. Sẵn sàng áp dụng kiến thức vào các dự án thực tế, các bài toán về website động, serverless, hoặc DevOps trên AWS. Nội dung Giới thiệu Các bước chuẩn bị Triển khai backend Kiểm thử API backend với Postman Triển khai frontend Thiết lập trang web SSL S3 Static Demo và chạy thử dự án Dọn dẹp tài nguyên "
},
{
	"uri": "https://thuananwork.github.io/vi/5-deployfrontend/5.5-connect-frontend-api-backend/",
	"title": "Kết nối frontend với API backend",
	"tags": [],
	"description": "",
	"content": "Kết nối frontend với API backend Sau khi đã upload website lên S3 và bật static hosting thành công, bước cuối cùng là kết nối frontend với backend thông qua endpoint API Gateway mà bạn đã kiểm thử trước đó. Đây là thao tác cực kỳ quan trọng để website có thể lấy/gửi dữ liệu động và thực sự hoạt động như một ứng dụng thương mại điện tử hiện đại.\nCác bước thực hiện:\nXác định endpoint API backend\nSử dụng chính endpoint API Gateway đã lấy ở bước kiểm thử backend.\nVí dụ: https://ars3538v1i.execute-api.ap-southeast-1.amazonaws.com/Prod/api/users Cập nhật cấu hình endpoint vào mã nguồn frontend\nMở code và tìm đến folder Frontend. Mở file .env trong thư mục Frontend Mở file index.js trong thư mục Frontend Dán URL của API Gateway đã copy vào URL gốc trong code Kết luận:\nSau khi kết nối frontend với backend thành công, website đã sẵn sàng hoạt động động với dữ liệu thực tế từ AWS. Bạn có thể tiếp tục cấu hình domain, bảo mật SSL, hoặc triển khai CloudFront để tối ưu hơn.\n"
},
{
	"uri": "https://thuananwork.github.io/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thuananwork.github.io/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]